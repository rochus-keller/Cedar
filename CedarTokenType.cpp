// This file was automatically generated by EbnfStudio; don't modify it!
#include "CedarTokenType.h"

namespace Cedar {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_Hash: return "#";
			case Tok_Lpar: return "(";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_2Minus: return "--";
			case Tok_Dot: return ".";
			case Tok_2Dot: return "..";
			case Tok_Slash: return "/";
			case Tok_Colon: return ":";
			case Tok_Semi: return ";";
			case Tok_Lt: return "<";
			case Tok_2Lt: return "<<";
			case Tok_Leq: return "<=";
			case Tok_Eq: return "=";
			case Tok_EqGt: return "=>";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_2Gt: return ">>";
			case Tok_At: return "@";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_Lbrace: return "{";
			case Tok_Bar: return "|";
			case Tok_Rbrace: return "}";
			case Tok_Tilde: return "~";
			case Tok_TildeLt: return "~<";
			case Tok_TildeEq: return "~=";
			case Tok_TildeGt: return "~>";
			case Tok_2Tilde: return "~~";
			case Tok_2190: return "‚Üê";
			case Tok_ABS: return "ABS";
			case Tok_ALL: return "ALL";
			case Tok_AND: return "AND";
			case Tok_ANY: return "ANY";
			case Tok_APPLY: return "APPLY";
			case Tok_ARRAY: return "ARRAY";
			case Tok_BASE: return "BASE";
			case Tok_BEGIN: return "BEGIN";
			case Tok_BROADCAST: return "BROADCAST";
			case Tok_CEDAR: return "CEDAR";
			case Tok_CHECKED: return "CHECKED";
			case Tok_CODE: return "CODE";
			case Tok_COMPUTED: return "COMPUTED";
			case Tok_CONS: return "CONS";
			case Tok_CONTINUE: return "CONTINUE";
			case Tok_DECREASING: return "DECREASING";
			case Tok_DEFINITIONS: return "DEFINITIONS";
			case Tok_DEPENDENT: return "DEPENDENT";
			case Tok_DESCRIPTOR: return "DESCRIPTOR";
			case Tok_DIRECTORY: return "DIRECTORY";
			case Tok_DO: return "DO";
			case Tok_ELSE: return "ELSE";
			case Tok_ENABLE: return "ENABLE";
			case Tok_END: return "END";
			case Tok_ENDCASE: return "ENDCASE";
			case Tok_ENDLOOP: return "ENDLOOP";
			case Tok_ENTRY: return "ENTRY";
			case Tok_ERROR: return "ERROR";
			case Tok_EXIT: return "EXIT";
			case Tok_EXITS: return "EXITS";
			case Tok_EXPORTS: return "EXPORTS";
			case Tok_FINISHED: return "FINISHED";
			case Tok_FIRST: return "FIRST";
			case Tok_FOR: return "FOR";
			case Tok_FORK: return "FORK";
			case Tok_FRAME: return "FRAME";
			case Tok_FREE: return "FREE";
			case Tok_FROM: return "FROM";
			case Tok_GO: return "GO";
			case Tok_GOTO: return "GOTO";
			case Tok_IF: return "IF";
			case Tok_IMPORTS: return "IMPORTS";
			case Tok_IN: return "IN";
			case Tok_INLINE: return "INLINE";
			case Tok_INTERNAL: return "INTERNAL";
			case Tok_ISTYPE: return "ISTYPE";
			case Tok_JOIN: return "JOIN";
			case Tok_LAST: return "LAST";
			case Tok_LENGTH: return "LENGTH";
			case Tok_LIST: return "LIST";
			case Tok_LOCKS: return "LOCKS";
			case Tok_LONG: return "LONG";
			case Tok_LOOP: return "LOOP";
			case Tok_LOOPHOLE: return "LOOPHOLE";
			case Tok_MACHINE: return "MACHINE";
			case Tok_MAX: return "MAX";
			case Tok_MIN: return "MIN";
			case Tok_MOD: return "MOD";
			case Tok_MONITOR: return "MONITOR";
			case Tok_MONITORED: return "MONITORED";
			case Tok_NARROW: return "NARROW";
			case Tok_NEW: return "NEW";
			case Tok_NIL: return "NIL";
			case Tok_NOT: return "NOT";
			case Tok_NOTIFY: return "NOTIFY";
			case Tok_NULL: return "NULL";
			case Tok_OF: return "OF";
			case Tok_OPEN: return "OPEN";
			case Tok_OR: return "OR";
			case Tok_ORD: return "ORD";
			case Tok_ORDERED: return "ORDERED";
			case Tok_OVERLAID: return "OVERLAID";
			case Tok_PACKED: return "PACKED";
			case Tok_PAINTED: return "PAINTED";
			case Tok_POINTER: return "POINTER";
			case Tok_PORT: return "PORT";
			case Tok_PRED: return "PRED";
			case Tok_PRIVATE: return "PRIVATE";
			case Tok_PROC: return "PROC";
			case Tok_PROCEDURE: return "PROCEDURE";
			case Tok_PROCESS: return "PROCESS";
			case Tok_PROGRAM: return "PROGRAM";
			case Tok_PUBLIC: return "PUBLIC";
			case Tok_READONLY: return "READONLY";
			case Tok_RECORD: return "RECORD";
			case Tok_REF: return "REF";
			case Tok_REJECT: return "REJECT";
			case Tok_RELATIVE: return "RELATIVE";
			case Tok_REPEAT: return "REPEAT";
			case Tok_RESTART: return "RESTART";
			case Tok_RESUME: return "RESUME";
			case Tok_RETRY: return "RETRY";
			case Tok_RETURN: return "RETURN";
			case Tok_RETURNS: return "RETURNS";
			case Tok_SAFE: return "SAFE";
			case Tok_SELECT: return "SELECT";
			case Tok_SEQUENCE: return "SEQUENCE";
			case Tok_SHARES: return "SHARES";
			case Tok_SIGNAL: return "SIGNAL";
			case Tok_SIZE: return "SIZE";
			case Tok_START: return "START";
			case Tok_STATE: return "STATE";
			case Tok_STOP: return "STOP";
			case Tok_SUCC: return "SUCC";
			case Tok_THEN: return "THEN";
			case Tok_THROUGH: return "THROUGH";
			case Tok_TO: return "TO";
			case Tok_TRANSFER: return "TRANSFER";
			case Tok_TRASH: return "TRASH";
			case Tok_TRUSTED: return "TRUSTED";
			case Tok_TYPE: return "TYPE";
			case Tok_UNCHECKED: return "UNCHECKED";
			case Tok_UNCOUNTED: return "UNCOUNTED";
			case Tok_UNSAFE: return "UNSAFE";
			case Tok_UNTIL: return "UNTIL";
			case Tok_USING: return "USING";
			case Tok_VAL: return "VAL";
			case Tok_VAR: return "VAR";
			case Tok_WAIT: return "WAIT";
			case Tok_WHILE: return "WHILE";
			case Tok_WITH: return "WITH";
			case Tok_ZONE: return "ZONE";
			case Tok_number: return "number";
			case Tok_string: return "string";
			case Tok_char: return "char";
			case Tok_symbol: return "symbol";
			case Tok_n: return "n";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_Hash: return "Tok_Hash";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_2Minus: return "Tok_2Minus";
			case Tok_Dot: return "Tok_Dot";
			case Tok_2Dot: return "Tok_2Dot";
			case Tok_Slash: return "Tok_Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Lt: return "Tok_Lt";
			case Tok_2Lt: return "Tok_2Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_Eq: return "Tok_Eq";
			case Tok_EqGt: return "Tok_EqGt";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_2Gt: return "Tok_2Gt";
			case Tok_At: return "Tok_At";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Bar: return "Tok_Bar";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_Tilde: return "Tok_Tilde";
			case Tok_TildeLt: return "Tok_TildeLt";
			case Tok_TildeEq: return "Tok_TildeEq";
			case Tok_TildeGt: return "Tok_TildeGt";
			case Tok_2Tilde: return "Tok_2Tilde";
			case Tok_2190: return "Tok_2190";
			case Tok_ABS: return "Tok_ABS";
			case Tok_ALL: return "Tok_ALL";
			case Tok_AND: return "Tok_AND";
			case Tok_ANY: return "Tok_ANY";
			case Tok_APPLY: return "Tok_APPLY";
			case Tok_ARRAY: return "Tok_ARRAY";
			case Tok_BASE: return "Tok_BASE";
			case Tok_BEGIN: return "Tok_BEGIN";
			case Tok_BROADCAST: return "Tok_BROADCAST";
			case Tok_CEDAR: return "Tok_CEDAR";
			case Tok_CHECKED: return "Tok_CHECKED";
			case Tok_CODE: return "Tok_CODE";
			case Tok_COMPUTED: return "Tok_COMPUTED";
			case Tok_CONS: return "Tok_CONS";
			case Tok_CONTINUE: return "Tok_CONTINUE";
			case Tok_DECREASING: return "Tok_DECREASING";
			case Tok_DEFINITIONS: return "Tok_DEFINITIONS";
			case Tok_DEPENDENT: return "Tok_DEPENDENT";
			case Tok_DESCRIPTOR: return "Tok_DESCRIPTOR";
			case Tok_DIRECTORY: return "Tok_DIRECTORY";
			case Tok_DO: return "Tok_DO";
			case Tok_ELSE: return "Tok_ELSE";
			case Tok_ENABLE: return "Tok_ENABLE";
			case Tok_END: return "Tok_END";
			case Tok_ENDCASE: return "Tok_ENDCASE";
			case Tok_ENDLOOP: return "Tok_ENDLOOP";
			case Tok_ENTRY: return "Tok_ENTRY";
			case Tok_ERROR: return "Tok_ERROR";
			case Tok_EXIT: return "Tok_EXIT";
			case Tok_EXITS: return "Tok_EXITS";
			case Tok_EXPORTS: return "Tok_EXPORTS";
			case Tok_FINISHED: return "Tok_FINISHED";
			case Tok_FIRST: return "Tok_FIRST";
			case Tok_FOR: return "Tok_FOR";
			case Tok_FORK: return "Tok_FORK";
			case Tok_FRAME: return "Tok_FRAME";
			case Tok_FREE: return "Tok_FREE";
			case Tok_FROM: return "Tok_FROM";
			case Tok_GO: return "Tok_GO";
			case Tok_GOTO: return "Tok_GOTO";
			case Tok_IF: return "Tok_IF";
			case Tok_IMPORTS: return "Tok_IMPORTS";
			case Tok_IN: return "Tok_IN";
			case Tok_INLINE: return "Tok_INLINE";
			case Tok_INTERNAL: return "Tok_INTERNAL";
			case Tok_ISTYPE: return "Tok_ISTYPE";
			case Tok_JOIN: return "Tok_JOIN";
			case Tok_LAST: return "Tok_LAST";
			case Tok_LENGTH: return "Tok_LENGTH";
			case Tok_LIST: return "Tok_LIST";
			case Tok_LOCKS: return "Tok_LOCKS";
			case Tok_LONG: return "Tok_LONG";
			case Tok_LOOP: return "Tok_LOOP";
			case Tok_LOOPHOLE: return "Tok_LOOPHOLE";
			case Tok_MACHINE: return "Tok_MACHINE";
			case Tok_MAX: return "Tok_MAX";
			case Tok_MIN: return "Tok_MIN";
			case Tok_MOD: return "Tok_MOD";
			case Tok_MONITOR: return "Tok_MONITOR";
			case Tok_MONITORED: return "Tok_MONITORED";
			case Tok_NARROW: return "Tok_NARROW";
			case Tok_NEW: return "Tok_NEW";
			case Tok_NIL: return "Tok_NIL";
			case Tok_NOT: return "Tok_NOT";
			case Tok_NOTIFY: return "Tok_NOTIFY";
			case Tok_NULL: return "Tok_NULL";
			case Tok_OF: return "Tok_OF";
			case Tok_OPEN: return "Tok_OPEN";
			case Tok_OR: return "Tok_OR";
			case Tok_ORD: return "Tok_ORD";
			case Tok_ORDERED: return "Tok_ORDERED";
			case Tok_OVERLAID: return "Tok_OVERLAID";
			case Tok_PACKED: return "Tok_PACKED";
			case Tok_PAINTED: return "Tok_PAINTED";
			case Tok_POINTER: return "Tok_POINTER";
			case Tok_PORT: return "Tok_PORT";
			case Tok_PRED: return "Tok_PRED";
			case Tok_PRIVATE: return "Tok_PRIVATE";
			case Tok_PROC: return "Tok_PROC";
			case Tok_PROCEDURE: return "Tok_PROCEDURE";
			case Tok_PROCESS: return "Tok_PROCESS";
			case Tok_PROGRAM: return "Tok_PROGRAM";
			case Tok_PUBLIC: return "Tok_PUBLIC";
			case Tok_READONLY: return "Tok_READONLY";
			case Tok_RECORD: return "Tok_RECORD";
			case Tok_REF: return "Tok_REF";
			case Tok_REJECT: return "Tok_REJECT";
			case Tok_RELATIVE: return "Tok_RELATIVE";
			case Tok_REPEAT: return "Tok_REPEAT";
			case Tok_RESTART: return "Tok_RESTART";
			case Tok_RESUME: return "Tok_RESUME";
			case Tok_RETRY: return "Tok_RETRY";
			case Tok_RETURN: return "Tok_RETURN";
			case Tok_RETURNS: return "Tok_RETURNS";
			case Tok_SAFE: return "Tok_SAFE";
			case Tok_SELECT: return "Tok_SELECT";
			case Tok_SEQUENCE: return "Tok_SEQUENCE";
			case Tok_SHARES: return "Tok_SHARES";
			case Tok_SIGNAL: return "Tok_SIGNAL";
			case Tok_SIZE: return "Tok_SIZE";
			case Tok_START: return "Tok_START";
			case Tok_STATE: return "Tok_STATE";
			case Tok_STOP: return "Tok_STOP";
			case Tok_SUCC: return "Tok_SUCC";
			case Tok_THEN: return "Tok_THEN";
			case Tok_THROUGH: return "Tok_THROUGH";
			case Tok_TO: return "Tok_TO";
			case Tok_TRANSFER: return "Tok_TRANSFER";
			case Tok_TRASH: return "Tok_TRASH";
			case Tok_TRUSTED: return "Tok_TRUSTED";
			case Tok_TYPE: return "Tok_TYPE";
			case Tok_UNCHECKED: return "Tok_UNCHECKED";
			case Tok_UNCOUNTED: return "Tok_UNCOUNTED";
			case Tok_UNSAFE: return "Tok_UNSAFE";
			case Tok_UNTIL: return "Tok_UNTIL";
			case Tok_USING: return "Tok_USING";
			case Tok_VAL: return "Tok_VAL";
			case Tok_VAR: return "Tok_VAR";
			case Tok_WAIT: return "Tok_WAIT";
			case Tok_WHILE: return "Tok_WHILE";
			case Tok_WITH: return "Tok_WITH";
			case Tok_ZONE: return "Tok_ZONE";
			case Tok_number: return "Tok_number";
			case Tok_string: return "Tok_string";
			case Tok_char: return "Tok_char";
			case Tok_symbol: return "Tok_symbol";
			case Tok_n: return "Tok_n";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			res = Tok_Bang; i += 1;
			break;
		case '#':
			res = Tok_Hash; i += 1;
			break;
		case '(':
			res = Tok_Lpar; i += 1;
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			res = Tok_Star; i += 1;
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '-' ){
				res = Tok_2Minus; i += 2;
			} else {
				res = Tok_Minus; i += 1;
			}
			break;
		case '.':
			if( at(str,i+1) == '.' ){
				res = Tok_2Dot; i += 2;
			} else {
				res = Tok_Dot; i += 1;
			}
			break;
		case '/':
			res = Tok_Slash; i += 1;
			break;
		case ':':
			res = Tok_Colon; i += 1;
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '<':
			switch( at(str,i+1) ){
			case '<':
				res = Tok_2Lt; i += 2;
				break;
			case '=':
				res = Tok_Leq; i += 2;
				break;
			default:
				res = Tok_Lt; i += 1;
				break;
			}
			break;
		case '=':
			if( at(str,i+1) == '>' ){
				res = Tok_EqGt; i += 2;
			} else {
				res = Tok_Eq; i += 1;
			}
			break;
		case '>':
			switch( at(str,i+1) ){
			case '=':
				res = Tok_Geq; i += 2;
				break;
			case '>':
				res = Tok_2Gt; i += 2;
				break;
			default:
				res = Tok_Gt; i += 1;
				break;
			}
			break;
		case '@':
			res = Tok_At; i += 1;
			break;
		case 'A':
			switch( at(str,i+1) ){
			case 'B':
				if( at(str,i+2) == 'S' ){
					res = Tok_ABS; i += 3;
				}
				break;
			case 'L':
				if( at(str,i+2) == 'L' ){
					res = Tok_ALL; i += 3;
				}
				break;
			case 'N':
				switch( at(str,i+2) ){
				case 'D':
					res = Tok_AND; i += 3;
					break;
				case 'Y':
					res = Tok_ANY; i += 3;
					break;
				}
				break;
			case 'P':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'Y' ){
							res = Tok_APPLY; i += 5;
						}
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'Y' ){
							res = Tok_ARRAY; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'B':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_BASE; i += 4;
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'G' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							res = Tok_BEGIN; i += 5;
						}
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'D' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'S' ){
										if( at(str,i+8) == 'T' ){
											res = Tok_BROADCAST; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'C':
			switch( at(str,i+1) ){
			case 'E':
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'R' ){
							res = Tok_CEDAR; i += 5;
						}
					}
				}
				break;
			case 'H':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'C' ){
						if( at(str,i+4) == 'K' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'D' ){
									res = Tok_CHECKED; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'O':
				switch( at(str,i+2) ){
				case 'D':
					if( at(str,i+3) == 'E' ){
						res = Tok_CODE; i += 4;
					}
					break;
				case 'M':
					if( at(str,i+3) == 'P' ){
						if( at(str,i+4) == 'U' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'D' ){
										res = Tok_COMPUTED; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'N':
					switch( at(str,i+3) ){
					case 'S':
						res = Tok_CONS; i += 4;
						break;
					case 'T':
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'U' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_CONTINUE; i += 8;
									}
								}
							}
						}
						break;
					}
					break;
				}
				break;
			}
			break;
		case 'D':
			switch( at(str,i+1) ){
			case 'E':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'S' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'G' ){
												res = Tok_DECREASING; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'F':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'T' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'O' ){
											if( at(str,i+9) == 'N' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_DEFINITIONS; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'P':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'T' ){
											res = Tok_DEPENDENT; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'C' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'P' ){
									if( at(str,i+7) == 'T' ){
										if( at(str,i+8) == 'O' ){
											if( at(str,i+9) == 'R' ){
												res = Tok_DESCRIPTOR; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'I':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'O' ){
									if( at(str,i+7) == 'R' ){
										if( at(str,i+8) == 'Y' ){
											res = Tok_DIRECTORY; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'O':
				res = Tok_DO; i += 2;
				break;
			}
			break;
		case 'E':
			switch( at(str,i+1) ){
			case 'L':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_ELSE; i += 4;
					}
				}
				break;
			case 'N':
				switch( at(str,i+2) ){
				case 'A':
					if( at(str,i+3) == 'B' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_ENABLE; i += 6;
							}
						}
					}
					break;
				case 'D':
					switch( at(str,i+3) ){
					case 'C':
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'S' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_ENDCASE; i += 7;
								}
							}
						}
						break;
					case 'L':
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'P' ){
									res = Tok_ENDLOOP; i += 7;
								}
							}
						}
						break;
					default:
						res = Tok_END; i += 3;
						break;
					}
					break;
				case 'T':
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'Y' ){
							res = Tok_ENTRY; i += 5;
						}
					}
					break;
				}
				break;
			case 'R':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							res = Tok_ERROR; i += 5;
						}
					}
				}
				break;
			case 'X':
				switch( at(str,i+2) ){
				case 'I':
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'S' ){
							res = Tok_EXITS; i += 5;
						} else {
							res = Tok_EXIT; i += 4;
						}
					}
					break;
				case 'P':
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'S' ){
									res = Tok_EXPORTS; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 'F':
			switch( at(str,i+1) ){
			case 'I':
				switch( at(str,i+2) ){
				case 'N':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'S' ){
							if( at(str,i+5) == 'H' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'D' ){
										res = Tok_FINISHED; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'R':
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'T' ){
							res = Tok_FIRST; i += 5;
						}
					}
					break;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'K' ){
						res = Tok_FORK; i += 4;
					} else {
						res = Tok_FOR; i += 3;
					}
				}
				break;
			case 'R':
				switch( at(str,i+2) ){
				case 'A':
					if( at(str,i+3) == 'M' ){
						if( at(str,i+4) == 'E' ){
							res = Tok_FRAME; i += 5;
						}
					}
					break;
				case 'E':
					if( at(str,i+3) == 'E' ){
						res = Tok_FREE; i += 4;
					}
					break;
				case 'O':
					if( at(str,i+3) == 'M' ){
						res = Tok_FROM; i += 4;
					}
					break;
				}
				break;
			}
			break;
		case 'G':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'O' ){
						res = Tok_GOTO; i += 4;
					}
				} else {
					res = Tok_GO; i += 2;
				}
			}
			break;
		case 'I':
			switch( at(str,i+1) ){
			case 'F':
				res = Tok_IF; i += 2;
				break;
			case 'M':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'S' ){
									res = Tok_IMPORTS; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'N':
				switch( at(str,i+2) ){
				case 'L':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_INLINE; i += 6;
							}
						}
					}
					break;
				case 'T':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'L' ){
										res = Tok_INTERNAL; i += 8;
									}
								}
							}
						}
					}
					break;
				default:
					res = Tok_IN; i += 2;
					break;
				}
				break;
			case 'S':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'Y' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_ISTYPE; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'J':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'N' ){
						res = Tok_JOIN; i += 4;
					}
				}
			}
			break;
		case 'L':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_LAST; i += 4;
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'G' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'H' ){
								res = Tok_LENGTH; i += 6;
							}
						}
					}
				}
				break;
			case 'I':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_LIST; i += 4;
					}
				}
				break;
			case 'O':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'K' ){
						if( at(str,i+4) == 'S' ){
							res = Tok_LOCKS; i += 5;
						}
					}
					break;
				case 'N':
					if( at(str,i+3) == 'G' ){
						res = Tok_LONG; i += 4;
					}
					break;
				case 'O':
					if( at(str,i+3) == 'P' ){
						if( at(str,i+4) == 'H' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'L' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_LOOPHOLE; i += 8;
									}
								}
							}
						} else {
							res = Tok_LOOP; i += 4;
						}
					}
					break;
				}
				break;
			}
			break;
		case 'M':
			switch( at(str,i+1) ){
			case 'A':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'H' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_MACHINE; i += 7;
								}
							}
						}
					}
					break;
				case 'X':
					res = Tok_MAX; i += 3;
					break;
				}
				break;
			case 'I':
				if( at(str,i+2) == 'N' ){
					res = Tok_MIN; i += 3;
				}
				break;
			case 'O':
				switch( at(str,i+2) ){
				case 'D':
					res = Tok_MOD; i += 3;
					break;
				case 'N':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'E' ){
										if( at(str,i+8) == 'D' ){
											res = Tok_MONITORED; i += 9;
										}
									} else {
										res = Tok_MONITOR; i += 7;
									}
								}
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 'N':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'W' ){
								res = Tok_NARROW; i += 6;
							}
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'W' ){
					res = Tok_NEW; i += 3;
				}
				break;
			case 'I':
				if( at(str,i+2) == 'L' ){
					res = Tok_NIL; i += 3;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'F' ){
							if( at(str,i+5) == 'Y' ){
								res = Tok_NOTIFY; i += 6;
							}
						}
					} else {
						res = Tok_NOT; i += 3;
					}
				}
				break;
			case 'U':
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'L' ){
						res = Tok_NULL; i += 4;
					}
				}
				break;
			}
			break;
		case 'O':
			switch( at(str,i+1) ){
			case 'F':
				res = Tok_OF; i += 2;
				break;
			case 'P':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'N' ){
						res = Tok_OPEN; i += 4;
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'D' ){
									res = Tok_ORDERED; i += 7;
								}
							}
						}
					} else {
						res = Tok_ORD; i += 3;
					}
				} else {
					res = Tok_OR; i += 2;
				}
				break;
			case 'V':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'D' ){
										res = Tok_OVERLAID; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'P':
			switch( at(str,i+1) ){
			case 'A':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'K' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'D' ){
								res = Tok_PACKED; i += 6;
							}
						}
					}
					break;
				case 'I':
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'D' ){
									res = Tok_PAINTED; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'O':
				switch( at(str,i+2) ){
				case 'I':
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'R' ){
									res = Tok_POINTER; i += 7;
								}
							}
						}
					}
					break;
				case 'R':
					if( at(str,i+3) == 'T' ){
						res = Tok_PORT; i += 4;
					}
					break;
				}
				break;
			case 'R':
				switch( at(str,i+2) ){
				case 'E':
					if( at(str,i+3) == 'D' ){
						res = Tok_PRED; i += 4;
					}
					break;
				case 'I':
					if( at(str,i+3) == 'V' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_PRIVATE; i += 7;
								}
							}
						}
					}
					break;
				case 'O':
					switch( at(str,i+3) ){
					case 'C':
						if( at(str,i+4) == 'E' ){
							switch( at(str,i+5) ){
							case 'D':
								if( at(str,i+6) == 'U' ){
									if( at(str,i+7) == 'R' ){
										if( at(str,i+8) == 'E' ){
											res = Tok_PROCEDURE; i += 9;
										}
									}
								}
								break;
							case 'S':
								if( at(str,i+6) == 'S' ){
									res = Tok_PROCESS; i += 7;
								}
								break;
							}
						} else {
							res = Tok_PROC; i += 4;
						}
						break;
					case 'G':
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'M' ){
									res = Tok_PROGRAM; i += 7;
								}
							}
						}
						break;
					}
					break;
				}
				break;
			case 'U':
				if( at(str,i+2) == 'B' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'C' ){
								res = Tok_PUBLIC; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'R':
			if( at(str,i+1) == 'E' ){
				switch( at(str,i+2) ){
				case 'A':
					if( at(str,i+3) == 'D' ){
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'L' ){
									if( at(str,i+7) == 'Y' ){
										res = Tok_READONLY; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'C':
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'D' ){
								res = Tok_RECORD; i += 6;
							}
						}
					}
					break;
				case 'F':
					res = Tok_REF; i += 3;
					break;
				case 'J':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'T' ){
								res = Tok_REJECT; i += 6;
							}
						}
					}
					break;
				case 'L':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'V' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_RELATIVE; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'P':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'T' ){
								res = Tok_REPEAT; i += 6;
							}
						}
					}
					break;
				case 'S':
					switch( at(str,i+3) ){
					case 'T':
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'R' ){
								if( at(str,i+6) == 'T' ){
									res = Tok_RESTART; i += 7;
								}
							}
						}
						break;
					case 'U':
						if( at(str,i+4) == 'M' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_RESUME; i += 6;
							}
						}
						break;
					}
					break;
				case 'T':
					switch( at(str,i+3) ){
					case 'R':
						if( at(str,i+4) == 'Y' ){
							res = Tok_RETRY; i += 5;
						}
						break;
					case 'U':
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'S' ){
									res = Tok_RETURNS; i += 7;
								} else {
									res = Tok_RETURN; i += 6;
								}
							}
						}
						break;
					}
					break;
				}
			}
			break;
		case 'S':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'F' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_SAFE; i += 4;
					}
				}
				break;
			case 'E':
				switch( at(str,i+2) ){
				case 'L':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'T' ){
								res = Tok_SELECT; i += 6;
							}
						}
					}
					break;
				case 'Q':
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'C' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_SEQUENCE; i += 8;
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'H':
				if( at(str,i+2) == 'A' ){
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'S' ){
								res = Tok_SHARES; i += 6;
							}
						}
					}
				}
				break;
			case 'I':
				switch( at(str,i+2) ){
				case 'G':
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'L' ){
								res = Tok_SIGNAL; i += 6;
							}
						}
					}
					break;
				case 'Z':
					if( at(str,i+3) == 'E' ){
						res = Tok_SIZE; i += 4;
					}
					break;
				}
				break;
			case 'T':
				switch( at(str,i+2) ){
				case 'A':
					switch( at(str,i+3) ){
					case 'R':
						if( at(str,i+4) == 'T' ){
							res = Tok_START; i += 5;
						}
						break;
					case 'T':
						if( at(str,i+4) == 'E' ){
							res = Tok_STATE; i += 5;
						}
						break;
					}
					break;
				case 'O':
					if( at(str,i+3) == 'P' ){
						res = Tok_STOP; i += 4;
					}
					break;
				}
				break;
			case 'U':
				if( at(str,i+2) == 'C' ){
					if( at(str,i+3) == 'C' ){
						res = Tok_SUCC; i += 4;
					}
				}
				break;
			}
			break;
		case 'T':
			switch( at(str,i+1) ){
			case 'H':
				switch( at(str,i+2) ){
				case 'E':
					if( at(str,i+3) == 'N' ){
						res = Tok_THEN; i += 4;
					}
					break;
				case 'R':
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'U' ){
							if( at(str,i+5) == 'G' ){
								if( at(str,i+6) == 'H' ){
									res = Tok_THROUGH; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'O':
				res = Tok_TO; i += 2;
				break;
			case 'R':
				switch( at(str,i+2) ){
				case 'A':
					switch( at(str,i+3) ){
					case 'N':
						if( at(str,i+4) == 'S' ){
							if( at(str,i+5) == 'F' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'R' ){
										res = Tok_TRANSFER; i += 8;
									}
								}
							}
						}
						break;
					case 'S':
						if( at(str,i+4) == 'H' ){
							res = Tok_TRASH; i += 5;
						}
						break;
					}
					break;
				case 'U':
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'D' ){
									res = Tok_TRUSTED; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'Y':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_TYPE; i += 4;
					}
				}
				break;
			}
			break;
		case 'U':
			switch( at(str,i+1) ){
			case 'N':
				switch( at(str,i+2) ){
				case 'C':
					switch( at(str,i+3) ){
					case 'H':
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'K' ){
									if( at(str,i+7) == 'E' ){
										if( at(str,i+8) == 'D' ){
											res = Tok_UNCHECKED; i += 9;
										}
									}
								}
							}
						}
						break;
					case 'O':
						if( at(str,i+4) == 'U' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'T' ){
									if( at(str,i+7) == 'E' ){
										if( at(str,i+8) == 'D' ){
											res = Tok_UNCOUNTED; i += 9;
										}
									}
								}
							}
						}
						break;
					}
					break;
				case 'S':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'F' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_UNSAFE; i += 6;
							}
						}
					}
					break;
				case 'T':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'L' ){
							res = Tok_UNTIL; i += 5;
						}
					}
					break;
				}
				break;
			case 'S':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'G' ){
							res = Tok_USING; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'V':
			if( at(str,i+1) == 'A' ){
				switch( at(str,i+2) ){
				case 'L':
					res = Tok_VAL; i += 3;
					break;
				case 'R':
					res = Tok_VAR; i += 3;
					break;
				}
			}
			break;
		case 'W':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_WAIT; i += 4;
					}
				}
				break;
			case 'H':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'E' ){
							res = Tok_WHILE; i += 5;
						}
					}
				}
				break;
			case 'I':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'H' ){
						res = Tok_WITH; i += 4;
					}
				}
				break;
			}
			break;
		case 'Z':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_ZONE; i += 4;
					}
				}
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			res = Tok_Hat; i += 1;
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '|':
			res = Tok_Bar; i += 1;
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		case '~':
			switch( at(str,i+1) ){
			case '<':
				res = Tok_TildeLt; i += 2;
				break;
			case '=':
				res = Tok_TildeEq; i += 2;
				break;
			case '>':
				res = Tok_TildeGt; i += 2;
				break;
			case '~':
				res = Tok_2Tilde; i += 2;
				break;
			default:
				res = Tok_Tilde; i += 1;
				break;
			}
			break;
		case '‚Üê':
			res = Tok_2190; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
