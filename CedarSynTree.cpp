// This file was automatically generated by EbnfStudio; don't modify it!
#include "CedarSynTree.h"
using namespace Cedar;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_access: return "access";
		case R_arg: return "arg";
		case R_argList: return "argList";
		case R_arguments: return "arguments";
		case R_block: return "block";
		case R_catchItem: return "catchItem";
		case R_catchList: return "catchList";
		case R_catch_: return "catch_";
		case R_checking: return "checking";
		case R_comment_: return "comment";
		case R_conjunct: return "conjunct";
		case R_declaration: return "declaration";
		case R_default_: return "default_";
		case R_definition: return "definition";
		case R_defsBody: return "defsBody";
		case R_defsHead: return "defsHead";
		case R_directory: return "directory";
		case R_disjunct: return "disjunct";
		case R_e: return "e";
		case R_element: return "element";
		case R_enable: return "enable";
		case R_entry: return "entry";
		case R_exit: return "exit";
		case R_exits: return "exits";
		case R_exports: return "exports";
		case R_factor: return "factor";
		case R_field: return "field";
		case R_field_or_nfield: return "field_or_nfield";
		case R_fields: return "fields";
		case R_for_: return "for_";
		case R_id: return "id";
		case R_implBody: return "implBody";
		case R_implHead: return "implHead";
		case R_imports: return "imports";
		case R_include: return "include";
		case R_initVal: return "initVal";
		case R_interval: return "interval";
		case R_lastCatch: return "lastCatch";
		case R_lhs: return "lhs";
		case R_literal: return "literal";
		case R_locks: return "locks";
		case R_machineCode: return "machineCode";
		case R_module: return "module";
		case R_negation: return "negation";
		case R_new_cons_list: return "new_cons_list";
		case R_nfield_: return "nfield";
		case R_nvariant: return "nvariant";
		case R_open: return "open";
		case R_openItem: return "openItem";
		case R_params: return "params";
		case R_prefixOp: return "prefixOp";
		case R_primary: return "primary";
		case R_product: return "product";
		case R_qualifiedName: return "qualifiedName";
		case R_range: return "range";
		case R_relation: return "relation";
		case R_relationTail: return "relationTail";
		case R_repeat: return "repeat";
		case R_s: return "s";
		case R_safety: return "safety";
		case R_scope: return "scope";
		case R_sequence: return "sequence";
		case R_shares: return "shares";
		case R_sum: return "sum";
		case R_t: return "t";
		case R_tag: return "tag";
		case R_test: return "test";
		case R_tilde: return "tilde";
		case R_trash: return "trash";
		case R_typeApplication: return "typeApplication";
		case R_typeConstructor: return "typeConstructor";
		case R_typeName: return "typeName";
		case R_typeOp: return "typeOp";
		case R_union_: return "union_";
		case R_variant: return "variant";
		case R_while_: return "while_";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
